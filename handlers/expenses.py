"""
File with expence control handlers.
"""
# import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from database import get_gsheet_id
from keyboards import list_items_keyboard, main_keyboard

from google_sheet.categories import get_categories, service_account
from google_sheet.accounts import get_account_names
from google_sheet.expenses import add_expens


class AddsExpense(StatesGroup):
    category = State()
    amount = State()
    account = State()
    comment = State()


async def add_expence_handler(message: types.Message, state: FSMContext):
    """Adds expence to user's Google sheet."""
    gsheet_id = get_gsheet_id(message.from_user.id)
    sheet = service_account.open_by_key(gsheet_id)

    categories = get_categories(sheet)["expense"]
    categories.sort()

    if len(categories) == 0:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
            "–ß—Ç–æ–±—ã –µ–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /add_expense_categories"
        )

    else:
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞–ø–∏—à–∏ `–æ—Ç–º–µ–Ω–∞`",
            reply_markup=list_items_keyboard(categories),
        )
        await AddsExpense.category.set()

        async with state.proxy() as data:
            data["categories"] = categories
            data["accounts"] = sorted(get_account_names(sheet))


async def get_category_handler(message: types.Message, state: FSMContext):
    """Gets category type from user."""
    category = message.text.title()

    async with state.proxy() as data:
        categories = data["categories"]

    if category not in categories:
        await message.answer(
            "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑!",
            reply_markup=list_items_keyboard(categories),
        )

    else:
        async with state.proxy() as data:
            data["category"] = category

        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª.")
        await AddsExpense.amount.set()


async def get_amount_handler(message: types.Message, state: FSMContext):
    """Gets amount from user."""
    amount = message.text
    try:
        amount = float(amount)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    else:
        async with state.proxy() as data:
            data["amount"] = amount
            accounts = data["accounts"]

        if len(accounts) == 0:
            await state.finish()
            await message.answer(
                "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞!"
                "–ß—Ç–æ–±—ã –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –≤–≤–µ–¥–∏ /add_account"
            )

        else:
            await AddsExpense.account.set()
            await message.answer(
                "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—á–µ—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞.",
                reply_markup=list_items_keyboard(accounts),
            )


async def get_account_handler(message: types.Message, state: FSMContext):
    """Gets user's account name."""
    account = message.text.title()

    async with state.proxy() as data:
        accounts = data["accounts"]

    if account not in accounts:
        await message.answer(
            "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑!",
            reply_markup=list_items_keyboard(accounts)
        )

    else:
        async with state.proxy() as data:
            data["account"] = account

        await AddsExpense.comment.set()

        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="finish_expense"))

        await message.answer(
            "–û–∫! –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–π –ø–æ–∫—É–ø–∫–µ."
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ. –ï—Å–ª–∏ —Ç—ã "
            "–Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å*.",
            parse_mode="Markdown",
            reply_markup=markup,
        )


def save_expense_to_sheet(data: dict):
    """
    Saves expense data to user's Google sheet.

    :param data: Data abount expense (amount, category, account, comment).
    """
    gsheet_id = data["gsheet_id"]

    amount = data["amount"]
    category = data["category"]
    account = data["account"]
    comment = data.get("comment", "")

    add_expens(amount, category, account, gsheet_id, comment)


async def cancel_comment_callback(call_query: types.CallbackQuery, state: FSMContext):
    """Saves expense data to Google sheet."""
    async with state.proxy() as data:
        data["gsheet_id"] = get_gsheet_id(call_query.from_user.id)
        save_expense_to_sheet(data)

    await state.finish()
    await call_query.message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É Goolge —Ç–∞–±–ª–∏—Ü—É!")


async def get_comment_handler(message: types.Message, state: FSMContext):
    """Gets user's comment and saves expense data to Google sheet."""
    async with state.proxy() as data:
        data["comment"] = message.text
        data["gsheet_id"] = get_gsheet_id(message.from_user.id)
        save_expense_to_sheet(data)

    await state.finish()
    await message.answer(
        "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É Goolge —Ç–∞–±–ª–∏—Ü—É!",
        reply_markup=main_keyboard(),
    )


async def cancel_adding_expense_handler(message: types.Message, state: FSMContext):
    """Breaks the adding expense process."""
    await state.finish()
    await message.answer(
        "*–û—Ç–º–µ–Ω–∞*\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤! üíµ",
        parse_mode="Markdown",
        reply_markup=main_keyboard(),
    )


def register_expences_handlers(dp: Dispatcher):
    """Registers all handlers related to adding an expence"""
    dp.register_message_handler(
        cancel_adding_expense_handler,
        lambda msg: msg.text.lower() == "–æ—Ç–º–µ–Ω–∞",
        state="*",
    )

    dp.register_message_handler(
        add_expence_handler,
        lambda msg: msg.text.lower() == "—Ä–∞—Å—Ö–æ–¥ üì§",
        # commands=["add_expense"],
        state="*",
    )
    dp.register_message_handler(
        add_expence_handler,
        commands=["add_expense"],
        state="*",
    )
    dp.register_message_handler(
        get_category_handler,
        state=AddsExpense.category,
    )
    dp.register_message_handler(
        get_amount_handler,
        state=AddsExpense.amount,
    )
    dp.register_message_handler(
        get_account_handler,
        state=AddsExpense.account,
    )
    dp.register_message_handler(
        get_comment_handler,
        state=AddsExpense.comment,
    )
    dp.register_callback_query_handler(
        cancel_comment_callback,
        lambda cb: cb.data and cb.data == "finish_expense",
        state=AddsExpense.comment,
    )
